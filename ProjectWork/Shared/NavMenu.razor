@using System.ComponentModel
@inject NavigationManager NavManager
<div class="d-flex flex-column flex-shrink-0 p-3" style="height: 100%">
    <div class="top-row ps-3 navbar">
        <div class="container-fluid">
            <a class="navbar-brand w3-text-white w3-large" href="">
                Art Scout
                <span class="material-symbols-outlined w3-text-white"> brush </span>
            </a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="material-symbols-outlined w3-text-white">
                    menu
                </span>
            </button>
        </div>
    </div>
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenuDiv">
        <div class="nav nav-pills flex-column mb-auto">

            <div class="nav-item px-3">
                <NavLink class="nav-link w3-padding-16" href="/Home">
                    <span class="material-symbols-outlined w3-margin-right">ambient_screen</span> Main Page
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link w3-padding-16" href="gallery">
                    <span class="material-symbols-outlined w3-margin-right" gr>gallery_thumbnail</span> Favorites Gallery
                </NavLink>
            </div>

            <div class="nav-item px-3 w3-margin-top">
                <NavLink class="nav-link" href="/info" Match="NavLinkMatch.All">
                    <span class="material-symbols-outlined w3-margin-right">info</span> Info
                </NavLink>
            </div>
        </div>


        @*MANAGE ACCOUNT USER/ADMIN*@
        <div class="nav nav-pills flex-column mt-auto">

            @if (App.Authentication.UserSession is null)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link w3-padding-16" href="login">
                        <span class="material-symbols-outlined w3-margin-right">login</span> Login
                    </NavLink>
                </div>
            }
            else
            {
                if (App.Authentication.UserSession.User is {IsStaff: true })
                {
                <div class="nav-item px-3 ">
                    <NavLink class="nav-link w3-padding-16" href="dashboard">
                        <span class="material-symbols-outlined w3-margin-right">design_services</span> Administration
                    </NavLink>
                </div>
                }
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All" @onclick="LogOut">
                        <span class="material-symbols-outlined w3-margin-right">logout</span> Logout
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <a href="#" class="d-flex align-items-center text-white text-decoration-none" id="dropdownUser1">
                        <img src="@App.Authentication.UserSession.User?.ProfilePicture" alt="" width="32" height="32" class="rounded-circle me-2">
                        <strong>xd</strong>
                    </a>
                    <NavLink class="nav-link w3-padding-16" href="accountDetails">
                        <span class="material-symbols-outlined w3-margin-right">settings_account_box</span> @App.Authentication.UserSession.User!.Username
                    </NavLink>
                </div>

            }
        </div>

    </div>

</div>

@code {

    private bool _collapseNavMenu = true;

    private string NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }
    private void ToggleNavMenuDiv()
    {
        if (!_collapseNavMenu)
        {
            _collapseNavMenu = !_collapseNavMenu;
        }
    }

    private void LogOut()
    {
        App.Authentication.LogOut();
    }
    protected override async Task OnInitializedAsync()
    {
        App.Authentication.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        await base.OnInitializedAsync();
    }
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public void Dispose()
    {
        App.Authentication.PropertyChanged -= OnPropertyChangedHandler;
    }
}