@using System.ComponentModel
@using ProjectWork.Utilities
@inject NavigationManager NavManager

<div class="d-flex flex-column flex-shrink-0" style="height: 97%">
    <div class="top-row ps-3 navbar">
        <div class="container-fluid">
            <a class="navbar-brand w3-text-white w3-large" href="home">
                Art Scout
                <span class="material-symbols-outlined w3-text-white"> brush </span>
            </a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="material-symbols-outlined w3-text-white">
                    menu
                </span>
            </button>
        </div>
    </div>
    <div class="@NavMenuCssClass " @onclick="ToggleNavMenuDiv">
        <div class="d-flex flex-column h-100">

            <div class="mb-auto">

                <div class="nav nav-pills flex-column mb-auto">

                    <div class="nav-item px-3">
                        <NavLink class="nav-link w3-padding-16" href="/Home">
                            <span class="material-symbols-outlined w3-margin-right">ambient_screen</span> Main Page
                        </NavLink>
                    </div>

                    <div class="nav-item px-3">
                        <NavLink class="nav-link w3-padding-16" href="/artist-search">
                            <span class="material-symbols-outlined w3-margin-right">palette</span> Artist Search
                        </NavLink>
                    </div>
                </div>

            </div>
            <div class="mt-auto">

                @*MANAGE ACCOUNT USER/ADMIN*@
                <div class="nav nav-pills flex-column mt-auto">

                    @if (App.Authentication.UserSession is null)
                    {
                        <div class="nav-item px-3">
                            <NavLink class="nav-link w3-padding-16" href="login">
                                <span class="material-symbols-outlined w3-margin-right">login</span> Login
                            </NavLink>
                        </div>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link px-3" href="registration">
                                <span class="material-symbols-outlined w3-margin-right">
                                    app_registration
                                </span> Registration
                            </NavLink>
                        </div>
                    }
                    else
                    {
                        if (App.Authentication.UserSession.User.IsStaff)
                        {
                            <div class="nav-item px-3">
                                <NavLink class="nav-link w3-padding-16" href="dashboard">
                                    <span class="material-symbols-outlined w3-margin-right">design_services</span> Administration
                                </NavLink>
                            </div>
                        }
                        <div class="nav-item px-3">
                            <NavLink class="nav-link w3-padding-16" href="accountDetails">
                                <img src="@App.Authentication.UserSession.User?.ProfilePicture" alt="Profile Picture" width="32" height="32" class="rounded-circle me-2">
                                <strong>
                                    @App.Authentication.UserSession.User!.Username
                                </strong>
                            </NavLink>
                        </div>

                        <div class="nav-item px-3">
                            <NavLink class="nav-link w3-padding-16" href="/bookmarks-gallery">
                                <span class="material-symbols-outlined w3-margin-right" gr>gallery_thumbnail</span> Bookmarks Gallery
                            </NavLink>
                        </div>

                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="/send-request">
                                <span class="material-symbols-outlined w3-margin-right">email</span> Email the staff
                            </NavLink>
                        </div>

                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="OutgoingRequests">
                                <span class="material-symbols-outlined w3-margin-right">
                                    forward_to_inbox
                                </span> Your requests
                            </NavLink>
                        </div>

                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All" @onclick="LogOut">
                                <span class="material-symbols-outlined w3-margin-right">logout</span> Logout
                            </NavLink>
                        </div>
                    }
                </div>

                <div class="nav nav-pills flex-column mt-auto">

                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/info" Match="NavLinkMatch.All">
                            <span class="material-symbols-outlined w3-margin-right">info</span> Info
                        </NavLink>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private bool _collapseNavMenu = true;

    private string NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    private void ToggleNavMenuDiv()
    {
        if (!_collapseNavMenu)
        {
            _collapseNavMenu = !_collapseNavMenu;
        }
    }

    private void LogOut()
    {
        App.Authentication.LogOut();
        UtilityToolkit.CreateToast("Log out successful");
    }

    protected override async Task OnInitializedAsync()
    {
        App.Authentication.PropertyChanged += async (_, _) => { await InvokeAsync(StateHasChanged); };
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        App.Authentication.PropertyChanged -= OnPropertyChangedHandler;
    }

}