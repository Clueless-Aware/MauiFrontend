@page "/password-reset-confirm"
@using ProjectWork.Utilities
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization
@layout MainLayout

@inject NavigationManager NavManager
<style>
    #content-container {
        background-image: url("bg-login.jpg");
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        min-height: 100% !important;
    }
</style>
<div class="d-flex align-items-center justify-content-center">
    <div id="login-card" class="card">
        <figure class="text-center">
            <blockquote class="blockquote">
                <p>Please sign in</p>
            </blockquote>
            <figcaption class="blockquote-footer">
                Thanks for use our app
            </figcaption>
        </figure>
        <div class="form-signin">
            <EditForm Model="@_passwordReset" OnValidSubmit="async () => await AttemptResetPassword(_passwordReset)">
                <div id="hideLogo">

                    <span class="material-symbols-outlined w3-text-white w3-margin-bottom w3-margin-top w3-xxxlarge w3-circle main-gradient" id="logo"> brush </span>

                    <h1 class="card w3-red main-gradient w3-text-white w3-round-xlarge w3-xxlarge w3-margin-bottom" style="text-shadow: #FC0 1px 0 10px; font-weight: bolder;" tabindex="-1">
                        ART SCOUT
                    </h1>
                </div>


                <div class="form-floating">
                    <input type="password" class="form-control" id="floatingPassword1" @bind-value="_passwordReset.NewPassword1" placeholder="New password">
                    <label for="floatingPassword1">New Password</label>
                </div>
                <div class="form-floating">
                    <input type="password" class="form-control" id="floatingPassword2" @bind-value="_passwordReset.NewPassword2" placeholder="Repeat password">
                    <label for="floatingPassword2">Password</label>
                </div>
                <div class="form-floating">
                    <input type="text" class="form-control" id="floatingUid" @bind-value="_passwordReset.Uid" placeholder="Code Uid">
                    <label for="floatingUid">Code Uid</label>
                </div>
                <div class="form-floating">
                    <input type="text" class="form-control" id="floatingToken" @bind-value="_passwordReset.Token" placeholder="Token">
                    <label for="floatingToken">Token</label>
                </div>

                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <button class="w-100 btn btn-lg btn-primary" type="submit">Reset Password</button>
                <p class="mt-auto">
                    Have already an account?
                    <NavLink href="login">
                        <a>Login</a>
                    </NavLink>
                </p>
                <p class="mt-auto">
                    <NavLink href="reset-password">
                        <a>Forgot password? </a>
                    </NavLink>
                </p>

            </EditForm>
        </div>
    </div>
</div>

@code {
    readonly PasswordReset _passwordReset = new();

    private async Task AttemptResetPassword(PasswordReset passwordReset)
    {
        var attempt = await App.Authentication.SendRequest(passwordReset, Endpoints.GetResetPasswordConfirmPath());
        if (attempt.status)
        {
            await UtilityToolkit.CreateToast("Password Changed");
            NavManager.NavigateTo("/login");
        }
        else
        {
            await UtilityToolkit.CreateToast(attempt.message);
        }
    }

    class PasswordReset
    {
        [Required]
        [JsonPropertyName("new_password1")]
        public string NewPassword1 { get; set; }


        [Required]
        [JsonPropertyName("new_password2")]
        public string NewPassword2 { get; set; }


        [Required]
        [JsonPropertyName("uid")]
        public string Uid { get; set; }


        [Required]
        [JsonPropertyName("token")]
        public string Token { get; set; }
    }


}