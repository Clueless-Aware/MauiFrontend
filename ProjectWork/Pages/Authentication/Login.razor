@page "/login"
@using ProjectWork.Models.Core.Authentication
@using ProjectWork.Utilities
@layout MainLayout

@inject IJSRuntime JsRuntime

<style>

    main {
        background-image: url("bg-1.jpg");
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        min-height: 100% !important;
    }

</style>
<div class="d-flex align-items-center justify-content-center">
    <div id="login-card" class="w3-margin-top card w3-round-xlarge w3-white w3-padding-large w3-center">
        <div class="form-signin">
            <EditForm Model="@_loginModel" OnValidSubmit="async () => await AttemptLogin(_loginModel)">
                <div id="">
                    <span class="material-symbols-outlined w3-text-white w3-margin-bottom w3-margin-top w3-xxxlarge w3-circle main-gradient" id="logo"> brush </span>
                    <h1 class="card w3-red main-gradient w3-text-white w3-round-xlarge w3-xxlarge w3-margin-bottom">
                        ART SCOUT
                    </h1>
                </div>
                <div class="form-floating w3-margin-top">
                    <input type="text" class="form-control w3-round w3-margin-bottom" id="floatingInput" @bind-value="_loginModel.UserName" placeholder="Username">
                    <label for="floatingInput">Username</label>
                </div>
                <div class="form-floating">
                    <input type="password" class="form-control w3-round w3-margin-top" id="floatingPassword" @bind-value="_loginModel.Password" placeholder="Password">
                    <label for="floatingPassword">Password</label>
                </div>
                <div class="checkbox mb-3">
                    <label>
                        <input class="w3-check w3-margin-top w3-margin-bottom" type="checkbox" value="remember-me"
                               @onclick="() => App.Authentication.SaveSession = !App.Authentication.SaveSession"> Remember me
                    </label>
                </div>
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <button class="general-button w3-margin-top w3-margin-bottom w-100" type="submit">Sign in</button>
                <p class="mt-auto">
                    Not a member?
                    <NavLink href="registration">
                        <a class="w3-text-red">Register</a>
                    </NavLink>
                </p>
                <p class="mt-auto">
                    <NavLink href="reset-password">
                        <a class="w3-text-red">Forgot password?</a>
                    </NavLink>
                </p>
            </EditForm>
        </div>
    </div>
</div>


@code {
    readonly LoginModel _loginModel = new();

    private async Task AttemptLogin(LoginModel loginModel)
    {
        var attempt = await App.Authentication.AuthenticateUser(loginModel);
        if (attempt.status)
        {
            await JsRuntime.InvokeVoidAsync("Main.goBack");
            await UtilityToolkit.CreateToast($"Successfully logged in as {loginModel.UserName}");
        }
        else
        {
            await UtilityToolkit.CreateToast(attempt.message);
        }
    }

}