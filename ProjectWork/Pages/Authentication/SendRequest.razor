@page "/send-request"
@using ProjectWork.Models.Core.Authentication
@using ProjectWork.Utilities
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization


<style>

    ul {
        list-style-type: none;
    }
</style>

<div class="w3-card-4 w3-padding w3-round-xlarge w3-margin-bottom w3-margin-top">
    <h3 class="w3-margin-left">Send a request</h3>

    <hr/>

    <EditForm class="w3-margin-bottom w3-round" Model="_emailRequest" id="contact-form" role="form" OnValidSubmit="async () => await SendEmail(_emailRequest)">
        <ul>
            <li>
                <p class="w3-bold">Subject:</p>
            </li>
            <li>
                <InputSelect class="w3-margin-bottom w3-round w3-padding-16" id="form_need" @bind-Value="_emailRequest.Subject">
                    <option class="w3-padding-32" selected="selected">Request New Artwork</option>
                    <option class="w3-padding-32">Request New Artist</option>
                    <option class="w3-padding-32">Request Admin Account</option>
                </InputSelect>
            </li>
            <li>
                <p class="w3-bold">
                    Mark as important:
                    <InputCheckbox class="w3-check" style="background-color:#cc0000" id="form_critical" @bind-Value="_emailRequest.Critical"/>
                </p>
            </li>
            <li>
                <p class="w3-bold w3-margin-top">Message:</p>
            </li>
            <li class="w3-margin-bottom ">
                <InputTextArea id="form_message" name="message" class="form-control"
                               placeholder="Write your message here."
                               rows="4" @bind-Value="_emailRequest.Content"/>
            </li>
            <li class="w3-margin-top">
                <input type="submit" class="general-button" value="Send Message">
            </li>
        </ul>
    </EditForm>
</div>


@code {
    readonly EmailInput _emailRequest = new();

    private async Task SendEmail(EmailInput emailRequest)
    {
        var attempt = await App.Authentication.SendRequest(new EmailRequest
        {
            Content = emailRequest.Content,
            Critical = emailRequest.Critical,
            FromUser = App.Authentication.UserSession.User.Id,
            Subject = emailRequest.Subject
        }, Endpoints.GetRequestsPath()
            );
        if (attempt.status)
        {
            await UtilityToolkit.CreateToast("A email was sent");
        }
        else
        {
            await UtilityToolkit.CreateToast(attempt.message);
        }
    }

    public class EmailInput
    {
        [Required]
        [JsonPropertyName("subject")]
        public string Subject { get; set; }

        [Required]
        [JsonPropertyName("content")]
        public string Content { get; set; }

        [Required]
        [JsonPropertyName("critical")]
        public bool Critical { get; set; }
    }

}