@page "/artist-search"
@using System.ComponentModel
@using ProjectWork.ViewModels.Artist
@inject SearchArtistVM ArtistDirector
@inject IJSRuntime JsRuntime


<Animate Animation="Animations.SlideLeft" Duration="TimeSpan.FromSeconds(0.2)">

    <section id="hero" class="hero d-flex flex-column justify-content-center align-items-center">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-6 text-center">
                    <h1>Search</h1>
                    <p>Here you can search for any artist you are interested in.</p>
                </div>
            </div>
            <div class="w3-bar w3-margin-bottom w3-padding">
                <span>

                    <input id="searchBar" type="search"
                           class="w3-padding w3-round-large w3-margin-bottom w3-margin-right w-100" step="any"
                           value="@SearchField" @onchange="async(e ) =>{ ArtistDirector.Parameters.SetPage(1) ;SearchField=(string)e.Value; ArtistDirector.Parameters.SetSearch(SearchField);}" />

                    <span class="material-symbols-outlined middle w3-xxlarge">
                        low_priority
                    </span>
                    <label class="switch middle w3-margin-left w3-margin-right">
                        <input type="checkbox" checked @onchange="CheckboxChanged">
                        <span class="slider round"></span>
                    </label>
                    <span class="material-symbols-outlined reverse middle w3-xxlarge">
                        low_priority
                    </span>

                    <button id="search" class="general-button" @onclick="async () => await ArtistDirector.GetGenericDataFromPageAsync()">
                        <span class="material-symbols-outlined">search</span>
                    </button>
                </span>


                <hr />
            </div>
        </div>
    </section><!-- End Hero Section -->
    <div>
        <PaginatorComponent Paginator="ArtistDirector.Paginator"></PaginatorComponent>
    </div>
    <div>
        <div class="w3-center">
            @if (ArtistDirector.GenericData != null && ArtistDirector.GenericData.Data != null)
            {

                @foreach (var artist in ArtistDirector.GenericData.Data)
                {
                    <div class="w3-card-4 w3-animate-right w3-round-large w3-white m-sm-2 m-lg-5 p-lg-3 p-sm-2">
                        <h1>
                            @artist.Name <button class="w3-round-large w3-center button-padding w3-text-black w3-hover-text-red w3-button">
                                <span class="material-symbols-outlined">
                                    bookmark
                                </span>
                            </button>
                        </h1>
                        <div class="d-flex flex-column flex-xl-row flex-lg-row flex-md-column flex-sm-column">
                            <div class="w3-col m6 w3-center w3-padding">
                                <a href="@artist.Portrait" data-fancybox="gallery" data-caption="@artist.Name">
                                    <img class="w3-round w3-image w3-margin-bottom img-thumbnail" src="@artist.Portrait" alt="@artist.Name" />
                                </a>
                                <p>
                                    <span class="material-symbols-outlined">
                                        history_edu
                                    </span> <a href="/detail-artist/@artist.Id">About @artist.Name</a>
                                </p>
                            </div>

                            <div class="portfolio-info w-100">
                                <h3>Artist information</h3>
                                <table class="w-100 w3-margin-top px-lg-5 px-4">
                                    <tr>
                                        <td>
                                            <span class="material-symbols-outlined">
                                                palette
                                            </span>
                                        </td>
                                        <td>
                                            <span class="material-symbols-outlined">
                                                calendar_month
                                            </span>
                                        </td>
                                        <td>
                                            <span class="material-symbols-outlined">
                                                location_city
                                            </span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @artist.Profession
                                        </td>
                                        <td>
                                            @artist.BirthData
                                        </td>
                                        <td>
                                            @artist.School
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="w3-padding-24 w3-round-large w3-opacity w3-margin-top">
                    <p class="middle">Could not connect to the Database, try again later.</p>
                </div>
            }
        </div>
    </div>
</Animate>

@code {
    private string SearchField { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ArtistDirector.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        await ArtistDirector.GetGenericDataFromPageAsync();
        await base.OnInitializedAsync();
    }
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ArtistDirector.PropertyChanged -= OnPropertyChangedHandler;
    }

    //Call my js
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("Main.start");
    }

    private void CheckboxChanged(ChangeEventArgs e)
    {
        bool b = (bool)e.Value;

        if (b)
        {
            ArtistDirector.Parameters.SetOrdering("title");
        }
        else
        {
            ArtistDirector.Parameters.SetOrdering("-title");

        }

        doSearch();
    }

    async void doSearch()
    {
        await ArtistDirector.GetGenericDataFromPageAsync();
    }
}
}