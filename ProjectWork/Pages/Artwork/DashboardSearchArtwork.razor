@page "/search_and_edit_artwork"
@inject DashboardAdminArtworkVM Artwork
@using ProjectWork.ViewModels.Artwork
@using System.ComponentModel
@implements IDisposable
@layout AdminLayout


    <style>

        #search {
            padding: 10px 20px 5px;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #cc0000;
            -webkit-transition: .4s;
            transition: .4s;
        }

            .slider:before {
                position: absolute;
                content: "";
                height: 26px;
                width: 26px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                -webkit-transition: .4s;
                transition: .4s;
            }

        input:checked + .slider {
            background-color: #cc0000;
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #ccc;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        .reverse {
            display: inline-block;
            -webkit-transform: rotate(180deg);
            -ms-transform: rotate(180deg);
            transform: rotate(180deg);
        }
    </style>

    <h1>Search</h1>

    <p>Here you can search for any art pieces you need to edit.</p>

    <div class="w3-bar w3-margin-bottom w3-padding">
        <span>
            <input id="searchBar" type="search"
                   class="w3-padding w3-round-large w3-margin-bottom w3-margin-right w-100" step="any"
                   value="@SearchField" @onchange=
                                        "e =>{ Artwork.Parameters.SetPage(1);SearchField = (string)e.Value; Artwork.Parameters.SetSearch(SearchField);}"/>

            <span class="material-symbols-outlined middle w3-xxlarge">
                low_priority
            </span>
            <label class="switch middle w3-margin-left w3-margin-right">
                <input type="checkbox" checked @onchange="e => { CheckboxChanged(e); }">
                <span class="slider round"></span>
            </label>
            <span class="material-symbols-outlined reverse middle w3-xxlarge">
                low_priority
            </span>

            <button id="search" class="general-button" @onclick="doSearch">
                <span class="material-symbols-outlined">search</span>
            </button>
        </span>

        <hr/>
    </div>

    <div>
        <PaginatorComponent Paginator="Artwork.Paginator"></PaginatorComponent>
    </div>


    <div class="w3-center">
        @if (Artwork.GenericData != null && Artwork.GenericData.Data != null)
        {
            @foreach (var result in Artwork.GenericData.Data)
            {
                <AdminArtwork artwork="result"></AdminArtwork>
            }
        }
        else
        {
            <div class="w3-padding-24 w3-round-large w3-opacity w3-margin-top">
                <p class="middle">Could not connect to the Database, try again later.</p>
            </div>
        }
    </div>


@code {
    private string SearchField { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artwork.PropertyChanged += async (sender, e) => { await InvokeAsync(() => { StateHasChanged(); }); };
        await Artwork.GetGenericDataFromPageAsync();
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public void Dispose()
    {
        Artwork.PropertyChanged -= OnPropertyChangedHandler;
    }

    async void doSearch()
    {
        await Artwork.GetGenericDataFromPageAsync();
    }

    private void CheckboxChanged(ChangeEventArgs e)
    {
        var b = (bool)e.Value;

        if (b)
        {
            Artwork.Parameters.SetOrdering("title");
            doSearch();
        }
        else
        {
            Artwork.Parameters.SetOrdering("-title");
            doSearch();
        }
    }

}