@page "/detail-artwork/{Id:int}"
@using ProjectWork.ViewModels.Artwork
@using ProjectWork.Models.Core
@using ProjectWork.Services.Core.OpenAI
@using ProjectWork.Utilities
@using ProjectWork.Models.Artwork
@inject SearchArtworkVM ArtworkDirector
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@if (_artwork != null)
{
    <div id="page-content" class="card m-lg-4 m-1 shadow-lg p-lg-3 p-2 bg-white">

        <!-- ======= Page Header ======= -->
        <div class="page-header d-flex align-items-center card-header">
            <div class="container position-relative">
                <div class="row d-flex justify-content-center">
                    <div class="col-lg-6 text-center card-title">
                        <h1>@_artwork.Title</h1>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Page Header -->

        <section id="gallery-single" class="gallery-single card-body">
            <div class="container">
                <div class="position-relative d-flex justify-content-center img-container">
                    <div class="h-100">
                        <a href="@_artwork.ImageUrl" data-fancybox="gallery" data-caption="@_artwork.Title">
                            <img class="img-artwork" src="@_artwork.ImageUrl" alt="@_artwork.Title"/>
                        </a>
                    </div>
                </div>
                <div class="row justify-content-between gy-4 mt-4">
                    <div class="w3-center w3-margin-top">
                        <button class="general-button" @onclick="async () => await AskChatGpt()">
                            Ask ChatGPT about this.
                            <span class="material-symbols-outlined">
                                temp_preferences_custom
                            </span>
                        </button>
                    </div>
                    @if (_artwork.Description.Length > 0)
                    {
                        <div class="col-lg-8">
                            <div class="portfolio-description">
                                <h2>Description</h2>
                                <p>
                                    @_artwork.Description
                                </p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-lg-8">
                            <div class="portfolio-description">
                                <h2>Description</h2>
                                <p>
                                    @_description
                                </p>
                            </div>
                        </div>
                    }
                    <div class="col-lg-4">
                        <div class="portfolio-info">
                            <h3>Artwork information</h3>
                            <ul>
                                <li>
                                    <strong>Author</strong> <span>@_artwork.Author</span>
                                </li>
                                <li>
                                    <strong>Date</strong> <span>@_artwork.Date</span>
                                </li>
                                <li>
                                    <strong>Technique</strong> <span>@_artwork.Technique</span>
                                </li>
                                <li @onclick="DriveToMuseum">
                                    <strong>Location</strong> <span>@_artwork.Location</span>
                                </li>
                                <li>
                                    <strong>Form of art</strong> <span>@Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(_artwork.Form)</span>
                                </li>
                                <li>
                                    <strong>Type</strong> <span>@Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(_artwork.Type)</span>
                                </li>
                                <li>
                                    <strong>Time Frame</strong> <span>@_artwork.TimeFrame</span>
                                </li>
                            </ul>
                        </div>

                        @if (App.Authentication.UserSession is not null)
                        {
                            if (App.Authentication.UserSession.User.BookmarkedArtworks.Any(bookmarkedArtwork => bookmarkedArtwork.Id == _artwork.Id))
                            {
                                <button type="button" class="btn btn-outline-default waves-effect"
                                        @onclick="() => Bookmarks.RemoveFromBookmarks(_artwork.Id, _artwork.Title)">
                                    <span class="material-symbols-outlined">
                                        bookmark_remove
                                    </span>
                                    Remove from bookmarks
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-outline-default waves-effect"
                                        @onclick="() => Bookmarks.AddToBookmarks(_artwork.Id, _artwork.Title)">
                                    <span class="material-symbols-outlined">
                                        bookmark_add
                                    </span>
                                    Add to bookmarks
                                </button>
                            }
                        }
                        else
                        {
                            <h5>
                                Would you like to bookmark <b>this artwork</b>?<br/>
                                Then please <a href="registration">create an account</a><br/>
                                Or <a href="login">sign in</a> to an existing one
                            </h5>
                        }
                    </div>
                </div>
            </div>
        </section>

        @if (RelatedArtworks.Data.Any())
        {
            <div>
                <PaginatorComponent Paginator="RelatedPaginator"></PaginatorComponent>
            </div>
            <!-- End Search Section -->
            <!-- ======= Gallery Section ======= -->
            <section id="gallery" class="gallery">
                <div class="container-fluid">

                    <div class="row gy-4 justify-content-center">
                        @foreach (var artwork in RelatedArtworks.Data)
                        {
                            <!-- Start Gallery Item -->
                            <div class="col-xl-4 col-lg-6 col-md-9" style="height: 400px">
                                <div class="gallery-item h-100">
                                    <img class="img-artwork" src="@artwork.ImageUrl" alt="@artwork.Title" style="height: 100%; width: 100%;object-fit: cover;">
                                    <div class="gallery-links d-flex align-items-center justify-content-center">
                                        <a href="@artwork.ImageUrl" data-fancybox="gallery" data-caption="@artwork.Title" class="preview-link">
                                            <span class="material-symbols-outlined">
                                                zoom_out_map
                                            </span>
                                        </a>
                                        <a href="/detail-artwork/@artwork.Id" class="details-link">
                                            <span class="material-symbols-outlined">
                                                info
                                            </span>
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <!-- End Gallery Item --->
                        }
                    </div>
                </div>
            </section>
        }
        else
        {
            <div class="w3-padding-24 w3-round-large w3-opacity w3-margin-top">
                <p class="middle">There are no related artworks we could find</p>
            </div>
        }
        <Navigator></Navigator>

    </div>
}
else
{
    <p>Loading...</p>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private string _description = "";


    private Parameters RelatedParameters { get; } = new();
    private GenericData<BaseArtwork> RelatedArtworks { get; set; } = new();
    private Paginator RelatedPaginator { get; } = new();
    private BaseArtwork _artwork;

    protected override async Task OnInitializedAsync()
    {
        _artwork = ArtworkDirector.GenericData.Data.SingleOrDefault(artwork => artwork.Id == Id)
                   ?? await ArtworkDirector.GetItemAsync(Id);

        if (_artwork != null)
        {
            RelatedParameters.SetSpecific(new BaseArtwork { AuthorId = _artwork.AuthorId });
            await GetRelatedData();
        }
        else
        {
            await UtilityToolkit.CreateToast("Sorry we couldn't load this artwork please try again later");
        }

        StateHasChanged();
    }

    private async Task GetRelatedData()
    {
        RelatedArtworks = await ArtworkDirector.GetGenericDataFromParam(RelatedParameters.Dictionary);
        RelatedPaginator.SetActualState(RelatedParameters, GetRelatedData, RelatedArtworks.Count);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("Main.start");
    }

    private async Task DriveToMuseum()
    {
        var placeMark = new Placemark
        {
            CountryName = _artwork.Location
        };
        var options = new MapLaunchOptions { Name = "Microsoft Building 25" };
        try
        {
            await Map.Default.OpenAsync(placeMark, options);
        }
        catch (Exception ex)
        {
    // No map application available to open or place mark can not be located
        }
    }

    private async Task AskChatGpt()
    {
        var author = _artwork.Author.Replace(',', ' ').ToLower();

        var title = _artwork.Title;
        var date = _artwork.Date;

        var prompt = "Write me a description of the artwork of " + author + " named " + title + "made in " + date;
        _description = "wait...";

        ChatGpt.input = prompt;

        await ChatGpt.gen();
        _description = ChatGpt.output;
    }

}