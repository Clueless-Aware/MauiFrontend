@page "/detail-artwork/{Id:int}"

@using ProjectWork.ViewModels.Artwork
@using ProjectWork.Models.Artwork
@using ProjectWork.Models.Core
@using ProjectWork.Services.Core.OpenAI
@using ProjectWork.Utilities

@inject SearchArtworkVM ArtworkDirector
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

<div id="page-content" class="card m-lg-4 m-1 shadow-lg p-lg-3 p-2 bg-white">

    <!-- ======= End Page Header ======= -->
    <div class="page-header d-flex align-items-center card-header">
        <div class="container position-relative">

            <div class="row d-flex justify-content-center">
                <div class="col-lg-6 text-center card-title">
                    <h1>@_artwork.Title</h1>
                </div>
                <button class="w3-right w-25 w3-button w3-hover-shadow w3-round" @onclick="close">
                    <span class="material-symbols-outlined">
                        close
                    </span>
                </button>


            </div>
        </div>
    </div>
    <!-- End Page Header -->


    <section id="gallery-single" class="gallery-single card-body">
        <div class="container">

            <div class="position-relative d-flex justify-content-center img-container">
                <div class="h-100">
                    <a href="@_artwork.ImageUrl" data-fancybox="gallery" data-caption="@_artwork.Title">
                        <img class="img-artwork" src="@_artwork.ImageUrl" alt="@_artwork.Title" />
                    </a>
                </div>
            </div>


            <div class="row justify-content-between gy-4 mt-4">
                <div class="w3-center w3-margin-top">
                    <button class="general-button" @onclick="show_result">
                        Ask ChatGPT about this.
                        <span class="material-symbols-outlined">
                            temp_preferences_custom
                        </span>
                    </button>
                </div>


                @if (_artwork.Description.Length > 0)
                {
                    <div class="col-lg-8">
                        <div class="portfolio-description">
                            <h2>Description</h2>
                            <p>
                                @_artwork.Description
                            </p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-lg-8">
                        <div class="portfolio-description">
                            <h2>Description</h2>
                            <p>
                                @description
                            </p>
                        </div>
                    </div>
                }

                <div class="col-lg-3">
                    <div class="portfolio-info">
                        <h3>Artwork information</h3>
                        <ul>
                            <li>
                                <strong>Author</strong> <span>@_artwork.Author</span>
                            </li>
                            <li>
                                <strong>Date</strong> <span>@_artwork.Date</span>
                            </li>
                            <li>
                                <strong>Technique</strong> <span>@_artwork.Technique</span>
                            </li>
                            <li @onclick="DriveToMuseum">
                                <strong>Location</strong> <span>@_artwork.Location</span>
                            </li>
                            <li>
                                <strong>Form</strong> <span>@_artwork.Form</span>
                            </li>
                            <li>
                                <strong>Type</strong> <span>@_artwork.Type</span>
                            </li>
                            <li>
                                <strong>Time Frame</strong> <span>@_artwork.TimeFrame</span>
                            </li>
                        </ul>
                    </div>
                </div>

            </div>
        </div>
    </section>
    @if (RelatedArtworks.Data.Any())
    {
        <div>
            <PaginatorComponent Paginator="RelatedPaginator"></PaginatorComponent>
        </div>
        <!-- End Search Section -->
        <!-- ======= Gallery Section ======= -->
        <section id="gallery" class="gallery">
            <div class="container-fluid">

                <div class="row gy-4 justify-content-center">
                    @foreach (var artwork in RelatedArtworks.Data)
                    {
                        <!-- Start Gallery Item -->
                        <div class="col-xl-4 col-lg-6 col-md-9" style="height: 400px">
                            <div class="gallery-item h-100">
                                <img class="img-artwork" src="@artwork.ImageUrl" alt="@artwork.Title" style="height: 100%; width: 100%;object-fit: cover;">
                                <div class="gallery-links d-flex align-items-center justify-content-center">
                                    <a href="@artwork.ImageUrl" data-fancybox="gallery" data-caption="@artwork.Title" class="preview-link">
                                        <span class="material-symbols-outlined">
                                            zoom_out_map
                                        </span>
                                    </a>
                                    <a href="/detail-artwork/@artwork.Id" class="details-link">
                                        <span class="material-symbols-outlined">
                                            info
                                        </span>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <!-- End Gallery Item --->
                    }
                </div>
            </div>
        </section>
    }
    else
    {
        <div class="w3-padding-24 w3-round-large w3-opacity w3-margin-top">
            <p class="middle">Could not connect to the Database, try again later.</p>
        </div>
    }
   </div>


@code {

    [Parameter]
    public int Id { get; set; }

    public Parameters RelatedParameters { get; set; } = new();
    public GenericData<BaseArtwork> RelatedArtworks { get; set; } = new();
    public Paginator RelatedPaginator { get; set; } = new();

    public string description = "";

    private BaseArtwork _artwork;

    protected override async void OnParametersSet()
    {
        _artwork = ArtworkDirector.GenericData.Data.SingleOrDefault(a => a.Id == Id) ?? RelatedArtworks.Data.SingleOrDefault(a => a.Id == Id);
        //TODO: if null call detail view
        if (_artwork != null) RelatedParameters.SetSpecific(new BaseArtwork() { AuthorId = _artwork.AuthorId });
        await GetRelatedData();
    }

    private async Task GetRelatedData()
    {
        try
        {
            RelatedArtworks = await ArtworkDirector.GetGenericDataFromParam(RelatedParameters.Dictionary);
            RelatedPaginator.SetActualState(RelatedParameters, GetRelatedData, RelatedArtworks.Count);
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            await UtilityToolkit.CreateToast("ok");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        askChatGPT();
        await JsRuntime.InvokeVoidAsync("Main.start");
    }

    private async Task GetDetailGenericData()
    {

    }

    private async Task DriveToMuseum()
    {
        var placeMark = new Placemark
            {
                CountryName = _artwork.Location
            };
        var options = new MapLaunchOptions { Name = "Microsoft Building 25" };
        try
        {
            await Map.Default.OpenAsync(placeMark, options);
        }
        catch (Exception ex)
        {
            // No map application available to open or place mark can not be located
        }
    }

    private void close()
    {
        NavManager.NavigateTo("/Home");
    }

    private async void askChatGPT()
    {
        string author = _artwork.Author.Replace(',', ' ');
        author.Reverse();
        author.ToLower();

        string title = _artwork.Title;
        string date = _artwork.Date;

        string prompt = "Write me a description of the artwork of " + author + " named " + title + "made in " + date;
        description = "wait...";

        ChatGpt.input = prompt;

        await ChatGpt.gen();
    }

    private void show_result()
    {
        description = ChatGpt.output;
    }

}