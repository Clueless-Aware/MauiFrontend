@page "/dashboard"
@using ProjectWork.ViewModels.Admin
@using ProjectWork.Models.Requests
@inject RequestsVirtualMachine RequestsVirtualMachine
@layout AdminLayout

<h2>User requests</h2>
<div class="table-responsive">
    <input type="checkbox" id="checkup"
           @onchange="() => ShowReviewed = !ShowReviewed" checked="@ShowReviewed"/>
    <label for="checkup">Show viewed requests</label>
    <table class="table table-sm table-group-divider table-hover">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">From User (ID)</th>
            <th scope="col">Subject</th>
            <th scope="col">Content</th>
            <th scope="col">Date</th>
            <th scope="col">Seen</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var request in RequestsVirtualMachine.GenericData.Data)
        {
            @if (request.IsSeen != true)
            {
                <tr class="@GetRowStyle(request)">
                    <th scope="row">@request.Id</th>
                    <td>@request.UserId</td>
                    <td>@request.Subject</td>
                    <td>@request.Content</td>
                    <td>@request.Date</td>
                    <td>
                        <input type="checkbox" checked="@request.IsSeen"
                               @onchange="async () => await UpdateRequest(request)"/>
                    </td>
                </tr>
            }
            else if (ShowReviewed)
            {
                <tr class="table-success">
                    <td colspan="5">
                        <bold>
                            Request @request.Id is marked as seen
                        </bold>
                    </td>
                    <td>
                        <input type="checkbox" checked="@request.IsSeen"
                               @onchange="async () => await UpdateRequest(request)"/>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>


@code{
    private bool ShowReviewed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RequestsVirtualMachine.GetGenericDataFromPageAsync();
        await base.OnInitializedAsync();
    }

    private static string GetRowStyle(RequestModel request)
    {
        return request.IsCritical ? "table-danger" : "table-info";
    }

    private async Task UpdateRequest(RequestModel request)
    {
        request.IsSeen = !request.IsSeen;
        await RequestsVirtualMachine.UpdateItemAsync(request);
    }

}