@page "/dashboard"
@using ProjectWork.ViewModels.Admin
@using ProjectWork.Models.Requests
@using ProjectWork.Utilities
@inject RequestsVirtualMachine RequestsVirtualMachine
@layout AdminLayout

<style>
    div.scrollmenu {
        overflow: auto;
        white-space: nowrap;
        background-color: white;
    }

        div.scrollmenu table {
            display: inline-block;
            color: white;
            text-align: center;
            padding: 14px;
            text-decoration: none;
        }

        div.scrollmenu a:hover {
            background-color: #777;
        }

    td, th {
        color: black;
    }
</style>


<h1>User requests</h1>
<hr />
<h2>Active requests</h2>


    <label for="checkup">Show viewed requests</label>
    <label class="switch middle w3-margin-left w3-margin-right">
        <input type="checkbox" id="checkup"
               @oninput="() => ShowReviewed = !ShowReviewed" checked="@ShowReviewed" />
        <span class="slider round"></span>
    </label>

    <div class="scrollmenu">
            @if (RequestsVirtualMachine.GenericData.Data.Any(request => !request.IsCompleted))
            {
                <table class="table table-sm table-group-divider table-hover">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">User email</th>
                            <th scope="col">Subject</th>
                            <th scope="col">Content</th>
                            <th scope="col">Date</th>
                            <th scope="col">Seen</th>
                            <th scope="col">Completed</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in RequestsVirtualMachine.GenericData.Data.Where(request => !request.IsCompleted))
                        {
                            @if (request.IsSeen != true || ShowReviewed)
                            {
                                <tr class="@GetRowStyle(request)">
                                    <th scope="row">@request.Id</th>
                                    <td>@request.UserEmail</td>
                                    <td>@request.Subject</td>
                                    <td>@request.Content</td>
                                    <td>@request.Date</td>
                                    <td>
                                        <input type="checkbox" checked="@request.IsSeen"
                                   @oninput="async () => await UpdateRequestToSeen(request)" />
                                    </td>
                                    <td>
                                        <input type="button" value="Completed"
                                   @onclick="async () => await UpdateRequestToCompleted(request)" />
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>There are no ongoing requests, good job!</p>
            }

        </div>
        <hr />

        <h2>Archived requests</h2>
        <hr />

        @if (RequestsVirtualMachine.GenericData.Data.Any(request => request.IsCompleted))
        {

            <div class="scrollmenu">
        <table id="fixed" class="table table-sm table-group-divider table-hover">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">User email</th>
                    <th scope="col">Subject</th>
                    <th scope="col">Content</th>
                    <th scope="col">Date</th>
                    <th scope="col">Seen</th>
                    <th scope="col">Completed</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in RequestsVirtualMachine.GenericData.Data.Where(request => request.IsCompleted))
                {
                    <tr class="table-secondary w3-padding-64">
                        <th scope="row">@request.Id</th>
                        <td>@request.UserEmail</td>
                        <td>@request.Subject</td>
                        <td>@request.Content</td>
                        <td>@request.Date</td>
                        <td>
                            <input type="checkbox" disabled="disabled" checked="@request.IsSeen"
                           @oninput="async () => await UpdateRequestToSeen(request)" />
                        </td>
                        <td>
                            <input type="button" value="Reopen request"
                           @onclick="async () => await UpdateRequestModelToOpen(request)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
            </div>
        }
        else
        {
            <p>You do not have any archived requests</p>
        }


@code {
    private bool ShowReviewed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RequestsVirtualMachine.GetGenericDataFromPageAsync();
        await base.OnInitializedAsync();
    }

    private static string GetRowStyle(RequestModel request)
    {
        if (request.IsSeen) return "table-success";
        return request.IsCritical ? "table-danger" : "table-info";
    }

    private async Task UpdateRequestToSeen(RequestModel request)
    {
        request.IsSeen = !request.IsSeen;
        await RequestsVirtualMachine.UpdateItemAsync(request);
        StateHasChanged();
    }

    private async Task UpdateRequestToCompleted(RequestModel request)
    {
        if (!request.IsSeen)
        {
            await UtilityToolkit.CreateToast("Error you are trying to mark as" +
                                             " completed a request that has not been set as seen");
            return;
        }
        request.IsCompleted = true;

        await RequestsVirtualMachine.UpdateItemAsync(request);
        StateHasChanged();
    }

    private async Task UpdateRequestModelToOpen(RequestModel request)
    {
        request.IsCompleted = false;
        request.IsSeen = false;

        await RequestsVirtualMachine.UpdateItemAsync(request);
        StateHasChanged();
    }
}