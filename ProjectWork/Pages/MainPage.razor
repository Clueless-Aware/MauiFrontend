@page "/Home"
@using ProjectWork.ViewModels;
@using System.ComponentModel;
@inject SearchArtworkVM Artwork


<Animate Animation="Animations.SlideLeft" Duration="TimeSpan.FromSeconds(0.2)">
    <style>

        #search {
            padding-top: 10px;
            padding-right: 20px;
            padding-bottom: 5px;
            padding-left: 20px;
        }

        .button-padding {
            padding-top: 0px;
            padding-right: 16px;
            padding-bottom: 0px;
            padding-left: 16px;
        }
    </style>

    <h1>Search</h1>

    <p>Here you can search for any art pieces you are interested in.</p>

    <div class="w3-bar w3-margin-bottom w3-padding">
        <span>
            @*TODO: Component*@
            <input id="searchBar" type="search"
                   class="w3-padding w3-round w3-margin-bottom w3-margin-right w-100" step="any"
                   value="@SearchField" @onchange="async(e ) =>{ Artwork.Parameters.SetPage(1) ;SearchField=(string)e.Value; Artwork.Parameters.SetSearch(SearchField);}" />
            <button id="filterAsc" class="btn-info" @onclick='()=>Artwork.Parameters.SetOrdering("title")'>Title Asc</button>
            <button id="filterDesc" class="btn-info" @onclick='()=>Artwork.Parameters.SetOrdering("-title")'>Title Desc</button>
            @*Fine*@
            <button id="search" class="btn w3-button w3-red w3-round-large" @onclick="async () => await Artwork.GetGenericDataFromPageAsync()">
                <span class="material-symbols-outlined">search</span>
            </button>
        </span>
        <hr />
    </div>

    <div>
        <PaginatorComponent Paginator="Artwork.Paginator"></PaginatorComponent>
    </div>

    <div>
        <div class="w3-center">
            @*TODO: ELSE SEE NO RESULTS*@
            @if (Artwork.GenericData != null && Artwork.GenericData.Data != null)
            {

                @foreach (var result in Artwork.GenericData.Data)
                {
                    <div class="w3-card-4 w3-animate-right w3-round-large w3-white w3-margin-bottom w3-padding-top-24">
                        <p class="w3-xxlarge">
                            @result.Title
                            <button class="w3-round-large w3-center button-padding w3-text-black w3-hover-text-red w3-button">
                                <span class="material-symbols-outlined">
                                    favorite
                                </span>
                            </button>

                    </p>

                        <div class="w3-row">
                            <div class="w3-col m6 w3-center w3-padding-large">
                                <p><b><i class="fa fa-user w3-margin-right"></i>Photo</b></p><br>
                                <img class="w3-round w3-image w3-margin-bottom" src="@result.ImageUrl" width="500" height="333" />
                            </div>

                            <div class="w3-col m6 w3-padding-large w3-left-align">
                                    @if (result.Description.Length > 0)
                                    {
                                        <p>
                                        @result.Description
                                        </p>
                                    }
                                    else{
                                        <p>
                                        Nothing to see :(
                                        </p>
                                    }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
            <div>NOTHING TO SEE :(</div>
            }
        </div>
    </div>
</Animate>

@code {
    private string SearchField { get; set; }
    private List<String> elements = new();

    private void AddElement()
    {
        int number = 5;
        for (int i = 0; i < number; i++)
            elements.Add("Lorem Ipsum");
    }
    protected override async Task OnInitializedAsync()
    {
        Artwork.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        await Artwork.GetGenericDataFromPageAsync();
        await base.OnInitializedAsync();
    }
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public void Dispose()
    {
        Artwork.PropertyChanged -= OnPropertyChangedHandler;
    }
}
