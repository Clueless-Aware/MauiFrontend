@page "/search_and_edit"

@using ProjectWork.Models
@using System.ComponentModel
@using ProjectWork.Models.Artwork;
@using ProjectWork.ViewModels;
@inject DashboardAdminVM Artwork
@implements IDisposable
@layout AdminLayout

<Animate Animation="Animations.SlideLeft" Duration="TimeSpan.FromSeconds(0.2)">
    <style>

        #search {
            padding-top: 10px;
            padding-right: 20px;
            padding-bottom: 5px;
            padding-left: 20px;
        }

        .button-padding {
            padding-top: 0px;
            padding-right: 16px;
            padding-bottom: 0px;
            padding-left: 16px;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #f44336;
            -webkit-transition: .4s;
            transition: .4s;
        }

            .slider:before {
                position: absolute;
                content: "";
                height: 26px;
                width: 26px;
                left: 4px;
                bottom: 4px;
                background-color: white;
                -webkit-transition: .4s;
                transition: .4s;
            }

        input:checked + .slider {
            background-color: #f44336;
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #ccc;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }

        .reverse {
            display: inline-block;
            -webkit-transform: rotate(180deg);
            -ms-transform: rotate(180deg);
            transform: rotate(180deg);
        }
    </style>

    <h1>Search</h1>

    <p>Here you can search for any art pieces you are interested in.</p>

    <div class="w3-bar w3-margin-bottom w3-padding">
        <span>

            <input id="searchBar" type="search"
                   class="w3-padding w3-round-large w3-margin-bottom w3-margin-right w-100" step="any"
                   value="@SearchField" @onchange="async(e ) =>{ Artwork.Parameters.SetPage(1) ;SearchField=(string)e.Value; Artwork.Parameters.SetSearch(SearchField);}" />

            <span class="material-symbols-outlined middle w3-xxlarge">
                low_priority
            </span>
            <label class="switch middle w3-margin-left w3-margin-right">
                <input type="checkbox" checked @onchange="CheckboxChanged">
                <span class="slider round"></span>
            </label>
            <span class="material-symbols-outlined reverse middle w3-xxlarge w3-margin-right">
                low_priority
            </span>

            <button id="search" class="btn w3-button w3-red w3-round-large" @onclick="async () => await Artwork.GetGenericDataFromPageAsync()">
                <span class="material-symbols-outlined">search</span>
            </button>
        </span>

        <hr />
    </div>
</Animate>

@*TODO: if null show message*@
@if (Artwork.GenericData != null)
{
    <PaginatorComponent Paginator="Artwork.Paginator"></PaginatorComponent>
    @foreach (var artwork in Artwork.GenericData.Data)
    {

        <AdminResult artwork="artwork"></AdminResult>

        <hr />

        <p>@artwork.Id</p>
        <p>@artwork.Author</p>
        <p>@artwork.AuthorId</p>
        <p>@artwork.Title</p>
        <p>@artwork.Date</p>
        <p>@artwork.Technique</p>
        <p>@artwork.Location</p>
        <p>@artwork.Form</p>
        <p>@artwork.Type</p>
        <p>@artwork.TimeFrame</p>
        <p>@artwork.Description</p>
        <img src="@artwork.ImageUrl">
        <h4>Delete</h4>
        <button @onclick="async ()=>await Artwork.DeleteItemAsync(artwork.Id)">delete</button>
        <hr />
        <h4>Edit @artwork.Id  - @artwork.Title</h4>
        <EditForm Model="@artwork" OnValidSubmit="async ()=>await Artwork.UpdateItemAsync(artwork)">
            @*Added to validate the data controlled in the model class*@
            <DataAnnotationsValidator />
            <ValidationSummary />

            @*TODO SET for and label*@
            <li class="w3-padding w3-large w3-w3-bold ">
                <label for="slug">Slug</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Author" placeholder="Enter Title" name="Slug">
            </li>
            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">Title</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.AuthorId" placeholder="Enter author" name="Title">
            </li>

            <li class="w3-padding w3-large w3-w3-bold ">
                <label for="description">Description</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Title" placeholder="Enter Description" name="Description">
            </li>
            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">Color</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Date" placeholder="Enter Color" name="Color">
            </li>

            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">File_dimension</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Technique" placeholder="Enter File_dimension" name="Color">
            </li>

            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">Date</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Location" placeholder="Enter Date" name="Color">
            </li>

            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">Type</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Form" placeholder="Enter Type" name="Color">
            </li>

            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">Size</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Type" placeholder="Enter Size" name="Color">
            </li>

            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">Museum</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.TimeFrame" placeholder="Enter Museum" name="Color">
            </li>

            <li class="w3-padding w3-large w3-w3-bold \">
                <label for="title">Museum</label>
            </li>
            <li class="w3-padding w3-margin-bottom">
                <input class=" w3-round" type="text" @bind-value="artwork.Description" placeholder="Enter Museum" name="Color">
            </li>

            @*Todo: show image or url image*@
            <li class="w3-margin-bottom">
                @*Todo: just one image and only images*@
                <InputFile class="w3-button w3-round" OnChange="(e)=> artwork.File = e.File" />
            </li>

            @*TODO: disable if Artwork.IsBusy*@
            <button type="submit">edit</button>
        </EditForm>

    }
}

@code {
    private string SearchField;
    protected override async Task OnInitializedAsync()
    {
        Artwork.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        await Artwork.GetGenericDataFromPageAsync();
        await base.OnInitializedAsync();
    }
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public void Dispose()
    {
        Artwork.PropertyChanged -= OnPropertyChangedHandler;
    }

    private void CheckboxChanged(ChangeEventArgs e)
    {
        bool b = (bool)e.Value;

        if (b)
        {
            Artwork.Parameters.SetOrdering("title");
        }
        else
        {
            Artwork.Parameters.SetOrdering("-title");
        }
    }
}
